/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.champeau.gradle.wasm;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.GradleRunner;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.nio.file.Files;
import java.util.function.Consumer;

import static org.junit.Assert.assertTrue;

/**
 * A simple functional test for the 'me.champeau.gradle.wasm.greeting' plugin.
 */
public class GradleWasmPluginFunctionalTest {
    @Rule
    public TemporaryFolder tmpDir = new TemporaryFolder();

    private GradleRunner runnerFor(File projectDir, String... tasks) {
        return GradleRunner.create()
                .forwardOutput()
                .withPluginClasspath()
                .withArguments(tasks)
                .withProjectDir(projectDir)
                .withDebug(true);
    }

    @Test
    public void canRunTask() throws IOException {
        // Setup the test build
        File projectDir = tmpDir.newFolder("functionalTest");
        Files.createDirectories(projectDir.toPath());
        writeString(new File(projectDir, "settings.gradle"), "");
        writeString(new File(projectDir, "build.gradle"),
            "plugins {" +
            "  id('me.champeau.gradle.wasm.greeting')" +
            "}");

        // Run the build
        GradleRunner runner = runnerFor(projectDir, "greet", "-S");
        BuildResult result = runner.build();

        // Verify the result
        assertTrue(result.getOutput().contains("Rust fib(90) = 2880067194370816120"));
        assertTrue(result.getOutput().contains("Java fib(90) = 2880067194370816120"));
        assertTrue(result.getOutput().contains("Precompiled Rust fib(90) = 2880067194370816120"));
    }

    @Test
    public void canComputeHash() throws IOException {
        // Setup the test build
        File projectDir = tmpDir.newFolder("functionalTest");
        Files.createDirectories(projectDir.toPath());
        writeString(new File(projectDir, "settings.gradle"), "");
        withFile(new File(projectDir, "build.gradle"), wrt -> {
            wrt.println("plugins {");
            wrt.println("  id('me.champeau.gradle.wasm.greeting')");
            wrt.println("  id 'java'");
            wrt.println("}");
            wrt.println();
            wrt.println("def file = layout.buildDirectory.file('file.bin')");
            wrt.println("def binFile = file.get().asFile");
            wrt.println("binFile.parentFile.mkdirs()");
            wrt.println("def rnd = new Random(12345L)");
            wrt.println("binFile.withOutputStream { os -> 32_000_000.times { os.write((byte) rnd.nextInt()) } }");
            wrt.println();
            wrt.println("tasks.named('md5') {");
            wrt.println("   inputFile.set(file)");
            wrt.println("}");
        });

        // Run the build
        GradleRunner runner = runnerFor(projectDir, "md5", "-S");
        BuildResult result = runner.build();

        // Verify the result
        assertTrue(result.getOutput().contains("hash from Rust is 49DFDCEF6751973A236D35401B6CBFC8"));
        assertTrue(result.getOutput().contains("hash from Java is 49DFDCEF6751973A236D35401B6CBFC8"));
    }

    @Test
    public void canGenerateTaskFromProtocol() throws IOException {
        // Setup the test build
        File projectDir = tmpDir.newFolder("functionalTest");
        Files.createDirectories(projectDir.toPath());
        writeString(new File(projectDir, "settings.gradle"), "");
        writeString(new File(projectDir, "build.gradle"),
                "plugins {" +
                        "  id('me.champeau.gradle.wasm.greeting')" +
                        "}\n" +
                "import me.champeau.gradle.wasm.auto.Sum\n" +
                "import me.champeau.gradle.wasm.auto.Fibo\n" +
                        "\n" +
                        "tasks.register(\"sum\", Sum) {\n" +
                        "    x = 10\n" +
                        "    y = 20\n" +
                        "}" +
                        "\n" +
                        "tasks.register(\"fibo\", Fibo) {\n" +
                        "    number = 15L\n" +
                        "}");

        // Run the build
        GradleRunner runner = GradleRunner.create()
                .forwardOutput()
                .withPluginClasspath()
                .withArguments("sum", "fibo")
                .withProjectDir(projectDir)
                .withDebug(true);
        BuildResult result = runner.build();

        // Verify the result
        assertTrue(result.getOutput().contains("Invocation result = 30"));
        assertTrue(result.getOutput().contains("Invocation result = 610"));
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }

    private void withFile(File file, Consumer<? super PrintWriter> consumer) {
        try (PrintWriter wrt = new PrintWriter(new FileWriter(file))) {
            consumer.accept(wrt);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
